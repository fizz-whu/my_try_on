const video = document.getElementById('webcam');
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer({ alpha: true });
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const loader = new THREE.GLTFLoader();
let glasses;

loader.load('models/glasses.glb', function (gltf) {
    glasses = gltf.scene;
    scene.add(glasses);
    glasses.visible = false;
}, undefined, function (error) {
    console.error(error);
});

camera.position.z = 5;

let facemeshModel;
(async () => {
    facemeshModel = await facemesh.load();
    startWebcam();
})();

video.addEventListener('loadeddata', () => {
    detectFace();
});

async function detectFace() {
    if (facemeshModel) {
        const predictions = await facemeshModel.estimateFaces(video);
        if (predictions.length > 0) {
            const keypoints = predictions[0].scaledMesh;
            const nose = keypoints[6];
            const leftEye = keypoints[33];
            const rightEye = keypoints[263];

            if (glasses) {
                const avgX = (leftEye[0] + rightEye[0]) / 2;
                const avgY = (leftEye[1] + rightEye[1]) / 2;

                glasses.position.set(avgX - nose[0], -avgY + nose[1], -200);
                glasses.scale.set(100, 100, 100);
                glasses.visible = true;
            }
        } else {
            if (glasses) {
                glasses.visible = false;
            }
        }
    }
    requestAnimationFrame(detectFace);
}

function startWebcam() {
    navigator.mediaDevices.getUserMedia({ video: true }).then(stream => {
        video.srcObject = stream;
    }).catch(console.error);
}

function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();
